---
title: "Stages Dashboard"
format: dashboard
#logo: images/logo.png
theme: custom.scss
params:
  repo_name: ""
---

```{python}
#| tags: [parameters]
# to render w/ a different product type:
# quarto render dashboard.qmd -P product_type:Premium

product_type = "Standard"


def enabled_calc(feature):
  df = pd.read_csv('data/full_info.csv')
  total = len(df)
  enabled_count = (df[feature] == 'enabled').sum()

  if total > 0:
    enabled_percentage = round((enabled_count/total), 2)
  else:
    enabled_percentage = 0

  return enabled_percentage


```

```{python}
import pandas as pd
from matplotlib import rcParams
import itables as itables
import matplotlib.pyplot as plt
import numpy as np

df_full_info = pd.read_csv('data/full_info.csv')
rcParams.update({"savefig.bbox": "tight"})


```

# Stages Display

<span style="font-size:1.5em; background-color:#e8e6dc; padding:4px 12px; border-radius:6px; font-weight:bold;">
  Organization: maximus-codeshuttle
</span>

## Row

```{python}
#| content: valuebox
#| title: "Number of Repositories"
dict(
  icon = "archive",
  color = "light",
  value = "4"
)
```

```{python}
#| content: valuebox
#| title: "Number of Branches"
dict(
  icon = "diagram-2",
  color = "light",
  value = "9"
)
```

```{python}
#| content: valuebox
#| title: "Pipeline Successful Completion Rate"

df = pd.read_csv('data/full_info.csv')
total = len(df)
print(f"Total: {total}")
success_count = (df['Status'] == 'SUCCESS').sum()

if total > 0:
    success_percentage = round((success_count/total) * 100, 2)
    print(f"success percentage: {success_percentage:.2f}%")
else:
    success_percentage = 0
    print("No data available to calculate success percentage.")


#success_percentage = (success_count / total) * 100

dict(
  icon = "rocket-takeoff",
  color = "warning",
  value=f"{success_percentage}%"
)
```

## Row 

```{python}
#| title: Total Security Features Enable/Disable Across All Repositories



enabled_percent = round((enabled_calc('Quality') + enabled_calc('SAST Check') + enabled_calc('Smoke') + enabled_calc('Unit Test') + enabled_calc('Dependency Track') + enabled_calc('SonarQube') + enabled_calc('ICS')) / 7 , 2)
disabled_percent = 1-enabled_percent 
y = np.array([enabled_percent,disabled_percent])
#y = np.array([80,20])
mylabels = ["Enabled","Disabled"]
myexplode = [0,0.2]


plt.pie(
  y,
  labels=mylabels, 
  explode=myexplode, 
  shadow=True,
  autopct='%1.1f%%',
  textprops={'fontsize': 20} 
  )
plt.show();

```


```{python}
#| title: Percent of Security Features Enabled Across All Repositories


stages = ['Quality','SAST Check', 'Smoke', 'Unit Test', 'Trivi', 'SonarQube', 'ICS']
bar_colors = ['#526dd1', '#36ad97', '#b56841', '#7bb84f', '#db9d39', '#542b6e', '#bf392a']

wrapped_labels = [label.replace(" ", "\n", 1) for label in stages]

percents = [int(enabled_calc('Quality')*100), int(enabled_calc('SAST Check')*100), int(enabled_calc('Smoke')*100), int(enabled_calc('Unit Test')*100), int(enabled_calc('Dependency Track')*100), int(enabled_calc('SonarQube')*100), int(enabled_calc('ICS')*100)]
#'#34eb61'
bars = plt.bar(wrapped_labels,percents, color=bar_colors)

# Add number labels on top of each bar
for bar in bars:
  height = bar.get_height()
  plt.text(bar.get_x() + bar.get_width()/2.0, height, f'{height}%', ha='center', va='bottom', fontsize=12)

plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Security Feature', fontsize=18)
plt.ylabel('Percent Enabled', fontsize=18)
plt.show();
```

## Row
<span style="font-size:1.2em; background-color:#edd968; padding:4px 12px; border-radius:6px; font-weight:bold;">
  By not enabling security features you subject your self to increase risk of data breaches, unauthorized access, and potential loss of sensitive information--please proceed at your own risk.
</span>

## Row

```{python}
from IPython.display import Markdown
#| title: Time and Version of Each Pipeline
df = pd.read_csv('data/full_info.csv')

time_version_col = df[['Branch', 'CodeShuttle version', 'Last pipeline run']]

Markdown(time_version_col.to_markdown(index=False))

```

# Data 

## Row {height="60%"}

```{python}
#| title: Data


# Displaying the DataFrame as an interactive table with pagination using itables
itables.options.classes = ["display", "table", "table-bordered", "table-striped"]


#itables.show(df_full_info, scrollY="350px", scrollCollapse=True, paging=False)
itables.show(df_full_info)
```
